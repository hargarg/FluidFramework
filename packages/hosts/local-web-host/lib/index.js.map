{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,EAAE,2BAA2B,EAAE,aAAa,EAAE,MAAM,8BAA8B,CAAC;AAC1F,OAAO,EAAE,0BAA0B,EAAE,MAAM,qCAAqC,CAAC;AACjF,OAAO,EAAE,EAAE,IAAI,IAAI,EAAE,MAAM,MAAM,CAAC;AAQlC,OAAO,EAAE,MAAM,EAAa,MAAM,kCAAkC,CAAC;AAGrE,OAAO,EAAE,2CAA2C,EAAE,MAAM,0BAA0B,CAAC;AACvF,OAAO,EAAE,uBAAuB,EAAE,MAAM,2BAA2B,CAAC;AACpE,OAAO,EAAE,eAAe,EAAE,MAAM,+BAA+B,CAAC;AAEhE,MAAM,CAAC,KAAK,UAAU,2BAA2B,CAC7C,UAA0F;IAE1F,MAAM,WAAW,GAAG,IAAI,aAAa,EAAE,CAAC;IAExC,MAAM,SAAS,GAAG,0BAA0B,CAAC,MAAM,EAAE,CAAC;IACtD,MAAM,sBAAsB,GAAG,IAAI,2BAA2B,CAAC,SAAS,CAAC,CAAC;IAE1E,MAAM,OAAO,GACT,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,UAAU,CAAC;IAEjE,MAAM,cAAc,GAChB,OAAO,CAAC,eAAe,CAAC,CAAC;QACrB,OAAO,CAAC,eAAe,CAAC,CAAC;QACzB,IAAI,2CAA2C,CAC3C,SAAS,EACT,CAAC,CAAC,SAAS,EAAE,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC,CAAC,CACjE,CAAC;IAEV,MAAM,UAAU,GAAgB;QAC5B,IAAI,EAAE,KAAK,IAAO,EAAE,CAAC,CAAC,EAAE,WAAW,EAAE,cAAc,EAAmB,CAAA;KACzE,CAAC;IAEF,MAAM,MAAM,GAAG,IAAI,MAAM,CACrB,WAAW,EACX,sBAAsB,EACtB,UAAU,EACV,EAAE,EACF,EAAE,EACF,IAAI,GAAG,EAA+B,CAAC,CAAC;IAE5C,MAAM,UAAU,GAAG,IAAI,EAAE,CAAC;IAC1B,MAAM,GAAG,GAAG,qBAAqB,UAAU,EAAE,CAAC;IAE9C,OAAO,KAAK,IAAI,EAAE;QACd,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;QAEhD,MAAM,uBAAuB,CAAC,SAAS,EAAE,EAA8B,CAAC,CAAC;QAEzE,4GAA4G;QAC5G,gFAAgF;QAChF,IAAI,SAAS,CAAC,cAAc,EAAE,EAAE;YAC5B,MAAM,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,gBAAgB,EAAE,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;SAC3F;QAED,OAAO,SAAS,CAAC;IACrB,CAAC,CAAC;AACN,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,wBAAwB,CAAC,SAAoB,EAAE,GAAgB;IACjF,MAAM,QAAQ,GAAG,MAAM,SAAS,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC;IAEtD,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG;QACvB,CAAC,CACG,QAAQ,CAAC,QAAQ,KAAK,iBAAiB;YACvC,QAAQ,CAAC,QAAQ,KAAK,cAAc,CACvC,EAAE;QACH,GAAG,CAAC,SAAS,GAAG,wBAAwB,CAAC;QACzC,OAAO;KACV;IAED,wGAAwG;IACxG,MAAM,WAAW,GAAG,QAAQ,CAAC,KAAqB,CAAC;IACnD,MAAM,KAAK,GAAG,IAAI,eAAe,CAAC,WAAW,CAAC,CAAC;IAC/C,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;AAC5C,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { LocalDocumentServiceFactory, LocalResolver } from \"@fluidframework/local-driver\";\nimport { LocalDeltaConnectionServer } from \"@fluidframework/server-local-server\";\nimport { v4 as uuid } from \"uuid\";\nimport {\n    IProxyLoaderFactory,\n    ICodeLoader,\n    IProvideRuntimeFactory,\n    IFluidModule,\n    IFluidCodeDetails,\n} from \"@fluidframework/container-definitions\";\nimport { Loader, Container } from \"@fluidframework/container-loader\";\nimport { IProvideFluidDataStoreFactory } from \"@fluidframework/runtime-definitions\";\nimport { IFluidObject } from \"@fluidframework/core-interfaces\";\nimport { ContainerRuntimeFactoryWithDefaultDataStore } from \"@fluidframework/aqueduct\";\nimport { initializeContainerCode } from \"@fluidframework/base-host\";\nimport { HTMLViewAdapter } from \"@fluidframework/view-adapters\";\n\nexport async function createLocalContainerFactory(\n    entryPoint: Partial<IProvideRuntimeFactory & IProvideFluidDataStoreFactory & IFluidModule>,\n): Promise<() => Promise<Container>> {\n    const urlResolver = new LocalResolver();\n\n    const deltaConn = LocalDeltaConnectionServer.create();\n    const documentServiceFactory = new LocalDocumentServiceFactory(deltaConn);\n\n    const factory: Partial<IProvideRuntimeFactory & IProvideFluidDataStoreFactory> =\n        entryPoint.fluidExport ? entryPoint.fluidExport : entryPoint;\n\n    const runtimeFactory: IProvideRuntimeFactory =\n        factory.IRuntimeFactory ?\n            factory.IRuntimeFactory :\n            new ContainerRuntimeFactoryWithDefaultDataStore(\n                \"default\",\n                [[\"default\", Promise.resolve(factory.IFluidDataStoreFactory)]],\n            );\n\n    const codeLoader: ICodeLoader = {\n        load: async <T>() => ({ fluidExport: runtimeFactory } as unknown as T),\n    };\n\n    const loader = new Loader(\n        urlResolver,\n        documentServiceFactory,\n        codeLoader,\n        {},\n        {},\n        new Map<string, IProxyLoaderFactory>());\n\n    const documentId = uuid();\n    const url = `fluid://localhost/${documentId}`;\n\n    return async () => {\n        const container = await loader.resolve({ url });\n\n        await initializeContainerCode(container, {} as any as IFluidCodeDetails);\n\n        // If we're loading from ops, the context might be in the middle of reloading.  Check for that case and wait\n        // for the contextChanged event to avoid returning before that reload completes.\n        if (container.hasNullRuntime()) {\n            await new Promise<void>((resolve) => container.once(\"contextChanged\", () => resolve()));\n        }\n\n        return container;\n    };\n}\n\nexport async function renderDefaultFluidObject(container: Container, div: HTMLElement) {\n    const response = await container.request({ url: \"\" });\n\n    if (response.status !== 200 ||\n        !(\n            response.mimeType === \"fluid/component\" ||\n            response.mimeType === \"fluid/object\"\n        )) {\n        div.innerText = \"Fluid object not found\";\n        return;\n    }\n\n    // Render the Fluid object with an HTMLViewAdapter to abstract the UI framework used by the Fluid object\n    const fluidObject = response.value as IFluidObject;\n    const embed = new HTMLViewAdapter(fluidObject);\n    embed.render(div, { display: \"block\" });\n}\n"]}